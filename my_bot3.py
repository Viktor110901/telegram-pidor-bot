import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

RATING_FILE = "rating.json"
users_last_choice_time = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
def load_rating(chat_id):
    try:
        with open(RATING_FILE, "r") as f:
            ratings = json.load(f)
            return ratings.get(str(chat_id), {})  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    except:
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
def save_rating(chat_id, rating):
    try:
        with open(RATING_FILE, "r") as f:
            ratings = json.load(f)
    except:
        ratings = {}

    ratings[str(chat_id)] = rating  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞

    with open(RATING_FILE, "w") as f:
        json.dump(ratings, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
async def get_all_members(chat_id, context: ContextTypes.DEFAULT_TYPE):
    members = []
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        for admin in admins:
            members.append(admin.user)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞: {e}")
    return members

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ "–°—Ç–∞—Ä—Ç" –∏ "–†–µ–π—Ç–∏–Ω–≥"
async def send_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        keyboard = [
            [InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="start_choice")],
            [InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data="view_rating")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_time = update.callback_query.message.date.timestamp()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 12 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±–æ—Ä–∞
    if chat_id in users_last_choice_time and current_time - users_last_choice_time[chat_id] < 43200:
        await update.callback_query.message.reply_text("–í—ã–±–æ—Ä –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    users = await get_all_members(chat_id, context)

    # –ò—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    users = [user for user in users if not user.is_bot]

    if users:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        rating = load_rating(chat_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for user in users:
            user_id = str(user.id)
            if user_id not in rating:
                rating[user_id] = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—á—ë—Ç 0

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected = random.choice(users)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        user_id = str(selected.id)
        rating[user_id] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        save_rating(chat_id, rating)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±–æ—Ä–∞
        users_last_choice_time[chat_id] = current_time

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await update.callback_query.message.reply_text(f"üéâ –ü–∏–¥–æ—Ä –¥–Ω—è: {selected.full_name}")
    else:
        await update.callback_query.message.reply_text("–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
async def view_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rating = load_rating(chat_id)

    if not rating:
        await update.callback_query.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±–æ—Ä–æ–≤
    sorted_rating = sorted(rating.items(), key=lambda x: x[1], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    text = "üèÜ –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:\n"
    for user_id, count in sorted_rating:
        try:
            user = await context.bot.get_chat_member(chat_id, int(user_id))
            text += f"{user.user.full_name}: {count} —Ä–∞–∑(–∞)\n"
        except Exception as e:
            text += f"User {user_id}: {count} —Ä–∞–∑(–∞)\n"

    await update.callback_query.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_choice":
        await start_choice(update, context)
    elif query.data == "view_rating":
        await view_rating(update, context)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("7730168646:AAHPj6NRIHzYrZ6JNUG2O_VMjMsZMoU6Mbo").build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", send_buttons))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
